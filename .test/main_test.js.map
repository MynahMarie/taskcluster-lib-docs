{
  "version": 3,
  "sources": [
    "main_test.js"
  ],
  "names": [
    "suite",
    "inStream",
    "output",
    "extractor",
    "tar",
    "extract",
    "downloadPromise",
    "resolve",
    "reject",
    "on",
    "header",
    "stream",
    "callback",
    "data",
    "chunk",
    "push",
    "name",
    "join",
    "resume",
    "pipe",
    "getObjectsInStream",
    "assert",
    "require",
    "documenter",
    "downloader",
    "debug",
    "_",
    "rootdir",
    "zlib",
    "validator",
    "config",
    "API",
    "Exchanges",
    "awsMock",
    "mockS3UploadStream",
    "validate",
    "api",
    "exchanges",
    "references",
    "cfg",
    "credentials",
    "taskcluster",
    "tier",
    "suiteSetup",
    "folder",
    "baseUrl",
    "constants",
    "title",
    "description",
    "reference",
    "assertInTarball",
    "shoulds",
    "tarball",
    "contains",
    "deepEqual",
    "sort",
    "e",
    "Unzip",
    "test",
    "schemas",
    "doc",
    "ok",
    "tgz",
    "equal",
    "tempCreds",
    "clientId",
    "accessToken",
    "project",
    "docsFolder",
    "bucket",
    "publish",
    "module",
    "skip",
    "files",
    "should"
  ],
  "mappings": "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",
  "file": "main_test.js",
  "sourceRoot": "../test",
  "sourcesContent": [
    "suite('End to End', () => {\n  let assert = require('assert');\n  let {documenter, downloader} = require('../');\n  let debug = require('debug')('test');\n  let _ = require('lodash');\n  let tar = require('tar-stream');\n  let rootdir = require('app-root-dir');\n  let zlib = require('zlib');\n  let validator = require('taskcluster-lib-validate');\n  let config = require('typed-env-config');\n  let API = require('taskcluster-lib-api');\n  let Exchanges = require('pulse-publisher');\n\n  let awsMock = require('aws-sdk-mock');\n  let mockS3UploadStream = require('./mockS3UploadStream');\n\n  let validate = null;\n  let api = null;\n  let exchanges = null;\n  let references = null;\n  let cfg = config({});\n  let credentials = cfg.taskcluster.credentials;\n  let tier = 'core';\n\n  suiteSetup(async () => {\n    validate = await validator({\n      folder: './test/schemas',\n      baseUrl: 'http://localhost:1203/',\n      constants: {'my-constant': 42},\n    });\n    api = new API({\n      title: 'Testing Stuff',\n      description: 'This is for testing stuff!',\n    });\n    exchanges = new Exchanges({\n      title: 'Testing Stuff Again',\n      description: 'Another test!',\n    });\n    references = [\n      {name: 'api', reference: api.reference({baseUrl: 'http://localhost'})},\n      {name: 'events', reference: exchanges.reference({baseUrl: 'http://localhost'})},\n    ];\n  });\n\n  async function getObjectsInStream(inStream) {\n    let output = {};\n    let extractor = tar.extract();\n\n    let downloadPromise = new Promise((resolve, reject) => {\n      extractor.on('entry', (header, stream, callback) => {\n        let data = [];\n\n        stream.on('data', function(chunk) {\n          data.push(chunk);\n        });\n\n        stream.on('end', () => {\n          output[header.name] = data.join('');\n          callback(); //ready for next entry\n        });\n\n        stream.resume(); //just auto drain the stream\n      });\n\n      extractor.on('finish', function() {\n        // all entries read\n        resolve();\n      });\n\n      extractor.on('error', function() {\n        reject();\n      });\n    });\n    inStream.pipe(extractor);\n    await downloadPromise;\n    return output;\n  }\n\n  function assertInTarball(shoulds, tarball) {\n    shoulds.push('metadata.json');\n    shoulds.push('README.md');\n    let contains = [];\n    let extractor = tar.extract();\n    extractor.on('entry', (header, stream, callback) => {\n      stream.on('end', () => {\n        contains.push(header.name);\n        callback(); // ready for next entry\n      });\n      stream.resume(); // just auto drain the stream\n    });\n\n    return new Promise((resolve, reject) => {\n      extractor.on('finish', function() {\n        try {\n          assert.deepEqual(contains.sort(), shoulds.sort());\n        } catch (e) {\n          reject(e);\n        }\n        resolve();\n      });\n\n      tarball.pipe(zlib.Unzip()).pipe(extractor);\n    });\n  }\n\n  test('tarball exists', async function() {\n    let doc = await documenter({\n      schemas: validate.schemas,\n      tier,\n    });\n    assert.ok(doc.tgz);\n  });\n\n  test('tarball is empty but exists', function() {\n    let doc = documenter({\n      tier,\n    });\n    assert.equal(doc.tgz, null);\n  });\n\n  test('test publish tarball', async function() {\n\n    //Setting fake credentials to bypass Taskcluster authentication.\n    let tempCreds = null;\n\n    if (!credentials.clientId) {\n      tempCreds = {clientId: 'bypassTcCreds', accessToken: '123456'};\n    }\n\n    let doc = await documenter({\n      project: 'docs-testing',\n      schemas: validate.schemas,\n      tier,\n      credentials: tempCreds || credentials,\n      docsFolder: './test/docs/',\n      references,\n      bucket: cfg.bucket,\n      publish: true,\n      module: mockS3UploadStream,\n    });\n    assert.ok(doc.tgz);\n  });\n\n  test('tarball contains docs and metadata', async function() {\n    let doc = await documenter({\n      docsFolder: './test/docs',\n      tier,\n    });\n    let shoulds = [\n      'docs/example.md',\n      'docs/nested/nested-example.md',\n    ];\n    return assertInTarball(shoulds, doc.tgz);\n  });\n\n  test('tarball contains schemas and metadata', async function() {\n    let doc = await documenter({\n      schemas: validate.schemas,\n      tier,\n    });\n    let shoulds = [\n      'schemas/foo.json',\n      'schemas/bar.json',\n      'docs/documenting-non-services.md',\n      'docs/format.md',\n    ];\n    return assertInTarball(shoulds, doc.tgz);\n  });\n\n  test('tarball contains references and metadata', async function() {\n    let doc = await documenter({\n      references,\n      tier,\n    });\n    let shoulds = [\n      'references/api.json',\n      'references/events.json',\n      'docs/documenting-non-services.md',\n      'docs/format.md',\n    ];\n    return assertInTarball(shoulds, doc.tgz);\n  });\n\n  test('tarball contains only metadata', async function() {\n    let doc = await documenter({\n      tier,\n    });\n    let shoulds = [\n      'docs/documenting-non-services.md',\n      'docs/format.md',\n    ];\n    return assertInTarball(shoulds, doc.tgz);\n  });\n\n  test('download tarball contains project', async function() {\n    if (!credentials.clientId) {\n      this.skip();\n    }\n\n    let stream = await downloader({\n      project: 'docs-testing',\n      bucket: cfg.bucket,\n      credentials,\n    });\n\n    let files = await getObjectsInStream(stream);\n\n    let shoulds = [\n      'metadata.json',\n    ];\n\n    for (let should of shoulds) {\n      assert.ok(files[should]);\n    }\n  });\n});\n"
  ]
}
